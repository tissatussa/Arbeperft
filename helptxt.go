package main

import (
	"fmt"
)

func fnHelp() {
	fmt.Println()
	fmt.Println("Perft : PERFormance Test, chess move path enumeration.")
	fmt.Println("This program is a debugging function to walk the chess move generation tree of strictly legal moves in any valid FEN position to count all leaf nodes of a certain depth. It can also count (ep) captures, castlings and promotions.")
	fmt.Println()
	fmt.Println("Syntax, command and arguments:")
	fmt.Println()
	fmt.Println("-------------------------------------------------------------")
	fmt.Println("> arbeperft [depth] [options] [FENp FENm FENc FENe FENh FENf]")
	fmt.Println("-------------------------------------------------------------")
	fmt.Println()
	fmt.Println("All parameters are optional : when none given, default settings are used.")
	fmt.Println("Settings will be loaded by the configuration files, if they exist and have concerning values.")
	fmt.Println("These Settings can be overruled by command arguments.")
	fmt.Println()
	fmt.Println("Option 'z' is the fastest, it counts all leaf nodes of a certain depth, no other counts are done.")
	fmt.Println("When a FEN is given by its (6) parameters, these should be the last on the command line.")
	fmt.Printf("You can use the files '%s' and '%s' (in same folder) to define custom settings - when these file(s) are missing, default settings are used.\n", FileFenCfg, FileCfg)
	fmt.Println()
	fmt.Printf("depth: upto %d\n", DepthMax)
	fmt.Println()
	fmt.Println("The options string may contain these characters, in any order:")
	fmt.Println("h: show only this Help message, all other options and parameters will be ignored.")
	fmt.Println("z: show just Perft counts, no other info : options x e c p will be ignored:")
	fmt.Println("x: count captures")
	fmt.Println("e: count En Passant captures (only when option x is also given)")
	fmt.Println("c: count Castlings")
	fmt.Println("p: count Promotions")
	fmt.Println("d: show position Diagram")
	fmt.Println("t: show Timer")
	fmt.Println("Undefined option characters are ignored.")
	fmt.Println("Omitting the options string will set default values.")
	fmt.Println()
	fmt.Println("Define the position by FEN notation:")
	fmt.Println("FENp: Position, eg. r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R")
	fmt.Println("FENm: side-to-Move, \"b\" or \"w\"")
	fmt.Println("FENc: Castling rights, eg. \"KQkq\" or \"-\"")
	fmt.Println("FENe: En passant square, eg. \"e3\" or \"-\"")
	fmt.Println("FENh: Halfmove clock, eg. 0")
	fmt.Println("FENf: Fullmove number, eg. 1")
	fmt.Printf("Omitting the FEN parameter(s) will set the FEN data pair (fen and description) in '%s' - if this config file is not found or it contains no FEN data pair, the starting position is loaded.\n", FileFenCfg )
	fmt.Println()
	fmt.Println("When a parameter contains a \"/\" character, it's considered to be the 'FENp' part and the program expects all other 5 FEN parts to be present. No FEN validation is done, an invalid or incomplete FEN may result in an error or unexpected output.")
	fmt.Println()
	fmt.Println("Examples:")
	fmt.Println("$ ./arbeperft")
	fmt.Println("$ ./arbeperft h")
	fmt.Println("$ ./arbeperft 4")
	fmt.Println("$ ./arbeperft 4 z")
	fmt.Println("$ ./arbeperft 4 pd")
	fmt.Println("$ ./arbeperft 4 xce r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1")
	fmt.Println("$ ./arbeperft r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1\n")
}

